Relatório Técnico – Projeto IdosoApp

1. Introdução

O IdosoApp é um sistema voltado para o gerenciamento de informações clínicas 
e administrativas de idosas em instituições de saúde. Desenvolvido em Java, 
o projeto utiliza o Maven para gerenciamento de dependências e um banco de 
dados relacional (MySQL) para persistência dos dados. O sistema visa 
facilitar o acompanhamento do histórico de saúde das residentes, otimizando 
processos internos e melhorando a qualidade do atendimento.

2. Estrutura do Projeto

A estrutura do projeto segue o padrão Maven e está organizada da seguinte 
forma:

Idosoapp/
├── pom.xml
├── src/
│   ├── main/
│   │   ├── java/
│   │   │   └── com/seuprojeto/idosoapp/
│   │   │       ├── controller/
│   │   │       ├── model/
│   │   │       ├── repository/
│   │   │       └── service/
│   │   └── resources/
│   │       ├── application.properties
│   │       └── static/
│   └── test/
│       └── java/
│           └── com/seuprojeto/idosoapp/
└── target/

- pom.xml: Configuração de dependências (Spring Boot, JPA, MySQL, JUnit, etc).
- controller/: Camada responsável por receber requisições HTTP.
- model/: Entidades JPA que representam as tabelas do banco de dados.
- repository/: Interfaces responsáveis pela persistência de dados (Spring Data JPA).
- service/: Lógica de negócio.
- resources/: Configurações e arquivos estáticos.
- test/: Testes automatizados.
- target/: Artefatos gerados após o build.

3. Arquitetura e Organização do Código

O projeto adota a arquitetura MVC (Model-View-Controller), promovendo a separação de responsabilidades:

- Model: Define as entidades do domínio, como Idosa, ProntuarioMedico, Consulta, etc.
- Repository: Interfaces JPA para acesso ao banco de dados.
- Service: Lógica de negócio, validações e regras.
- Controller: Pontos de entrada para a API, geralmente endpoints REST (caso utilize Spring Boot).

Exemplo de Entidade

@Entity
public class Idosa {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private int id;
    private String nome;
    private String cpf;
    private Date dataNascimento;
    private String nomeMae;
    private String cartaoSus;
    private Date dataEntrada;
    // Getters e setters
}

Exemplo de Repositório

public interface IdosaRepository extends JpaRepository <Idosa, Integer> { }

Exemplo de Controller

@RestController
@RequestMapping("/idosas")
public class IdosaController {
    @Autowired
    private IdosaService idosaService;

    @PostMapping
    public Idosa criarIdosa(@RequestBody Idosa idosa) {
        return idosaService.salvar(idosa);
    }
}

4. Configuração

Arquivo application.properties:

spring.datasource.url=jdbc:mysql://localhost:3306/idosoapp
spring.datasource.username=root
spring.datasource.password=senha
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true

- spring.jpa.hibernate.ddl-auto=update: Atualiza o schema do banco automaticamente conforme as entidades.

5. Testes Automatizados

O projeto utiliza JUnit para testes unitários e de integração. Os testes garantem a integridade e o funcionamento 
correto das principais funcionalidades.

Exemplo de Teste

@Test
public void testCriarIdosa() {
    Idosa idosa = new Idosa();
    idosa.setNome("Maria");
    assertEquals("Maria", idosa.getNome());
}

Testes podem ser expandidos para controllers usando MockMvc.

6. Modelo de Dados (Diagrama ER - Descrição)

- idosa (1) —— (N) prontuario_medico
- prontuario_medico (1) —— (N) consulta, prescricao, vacina, evento_sentinela, relatorio
- profissional_saude (1) —— (N) consulta

Esse modelo garante rastreabilidade de todas as ações e procedimentos realizados com cada idosa.

7. Fluxo do Sistema

1. Cadastro de idosa e profissionais de saúde.
2. Criação do prontuário médico vinculado à idosa.
3. Registro de consultas, prescrições, vacinas, eventos sentinela e relatórios.
4. Consulta ao histórico médico da idosa, permitindo acompanhamento individualizado.

8. Segurança e Boas Práticas

- Autenticação e Autorização: Recomenda-se o uso de Spring Security para proteger endpoints sensíveis.
- Validação: Dados de entrada são validados em nível de DTO ou entidade.
- Tratamento de exceções: Controllers possuem handlers para erros comuns (ex: dados inválidos).
- Backup: O banco de dados deve possuir rotina de backup periódico.

9. Build e Execução

Para compilar e rodar os testes do projeto:

```powershell
cd Idosoapp
..\maven\mvn\bin\mvn.cmd clean test -f .\Idosoapp\pom.xml
```

10. Possíveis Melhorias Futuras

- Implementação de interface web responsiva (Thymeleaf, Angular, React).
- Exportação de relatórios em PDF.
- Dashboards gerenciais para visualização de indicadores.
- Integração com sistemas externos (ex: e-SUS).
- Deploy em nuvem com CI/CD.

11. Considerações Finais

O IdosoApp apresenta uma estrutura modular e organizada, facilitando manutenção e expansão. O uso de testes 
automatizados e boas práticas de projeto contribui para a robustez do sistema, promovendo segurança, rastreabilidade
 e eficiência no gerenciamento de informações clínicas em instituições de longa permanência para idosas.

12. Referências

- Documentação Spring Boot
- Documentação JPA
- Documentação Maven
- Documentação JUnit
- MySQL Documentation

---



